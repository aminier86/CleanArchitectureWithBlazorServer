//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-09
// Command and handler for creating a new Ejemplo.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/ejemplo
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Ejemplos.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Ejemplos.Commands.Create;

public class CreateEjemploCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Name")]
    public string Name {get;set;} 
    [Description("Description")]
    public string? Description {get;set;} 
    [Description("Email")]
    public string? Email {get;set;} 
    [Description("Phone number")]
    public string? PhoneNumber {get;set;} 
    [Description("Country")]
    public string? Country {get;set;} 

      public string CacheKey => EjemploCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => EjemploCacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateEjemploCommand, Ejemplo>(MemberList.None);
        }
    }
}
    
    public class CreateEjemploCommandHandler : IRequestHandler<CreateEjemploCommand, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;
        public CreateEjemploCommandHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory)
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
        }
        public async Task<Result<int>> Handle(CreateEjemploCommand request, CancellationToken cancellationToken)
        {
           await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
           var item = _mapper.Map<Ejemplo>(request);
           // raise a create domain event
	       item.AddDomainEvent(new EjemploCreatedEvent(item));
           db.Ejemplos.Add(item);
           await db.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

