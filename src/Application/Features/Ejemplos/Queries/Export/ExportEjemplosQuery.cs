//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-09
//     Last Modified: 2025-09-09
//     Description: 
//       Defines a query to export ejemplo data to an Excel file. This query 
//       applies advanced filtering options and generates an Excel file with 
//       the specified ejemplo details.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Ejemplos.DTOs;
using CleanArchitecture.Blazor.Application.Features.Ejemplos.Caching;
using CleanArchitecture.Blazor.Application.Features.Ejemplos.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.Ejemplos.Queries.Export;

public class ExportEjemplosQuery : EjemploAdvancedFilter, ICacheableRequest<Result<byte[]>>
{
      public EjemploAdvancedSpecification Specification => new EjemploAdvancedSpecification(this);
      public IEnumerable<string>? Tags => EjemploCacheKey.Tags;
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}, Search:{Keyword}, {OrderBy}, {SortDirection}";
    }
    public string CacheKey => EjemploCacheKey.GetExportCacheKey($"{this}");
}
    
public class ExportEjemplosQueryHandler :
         IRequestHandler<ExportEjemplosQuery, Result<byte[]>>
{
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;
        private readonly IExcelService _excelService;
        private readonly IStringLocalizer<ExportEjemplosQueryHandler> _localizer;
        private readonly EjemploDto _dto = new();
        public ExportEjemplosQueryHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory,
            IExcelService excelService,
            IStringLocalizer<ExportEjemplosQueryHandler> localizer
            )
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
            _excelService = excelService;
            _localizer = localizer;
        }
        #nullable disable warnings
        public async Task<Result<byte[]>> Handle(ExportEjemplosQuery request, CancellationToken cancellationToken)
        {
            await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
            var data = await db.Ejemplos.ApplySpecification(request.Specification)
                       .OrderBy($"{request.OrderBy} {request.SortDirection}")
                       .ProjectTo<EjemploDto>(_mapper.ConfigurationProvider)
                       .AsNoTracking()
                       .ToListAsync(cancellationToken);
            var result = await _excelService.ExportAsync(data,
                new Dictionary<string, Func<EjemploDto, object?>>()
                {
                                     {_localizer[_dto.GetMemberDescription(x=>x.Name)],item => item.Name}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.Description)],item => item.Description}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.Email)],item => item.Email}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.PhoneNumber)],item => item.PhoneNumber}, 
                 {_localizer[_dto.GetMemberDescription(x=>x.Country)],item => item.Country}, 

                }
                , _localizer[_dto.GetClassDescription()]);
            return await Result<byte[]>.SuccessAsync(result);
        }
}
