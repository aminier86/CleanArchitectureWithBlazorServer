//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-09
//     Last Modified: 2025-09-09
//     Description: 
//       Defines a query to export departamento data to an Excel file. This query 
//       applies advanced filtering options and generates an Excel file with 
//       the specified departamento details.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Departamentos.DTOs;
using CleanArchitecture.Blazor.Application.Features.Departamentos.Caching;
using CleanArchitecture.Blazor.Application.Features.Departamentos.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.Departamentos.Queries.Export;

public class ExportDepartamentosQuery : DepartamentoAdvancedFilter, ICacheableRequest<Result<byte[]>>
{
    public DepartamentoAdvancedSpecification Specification => new DepartamentoAdvancedSpecification(this);
    public IEnumerable<string>? Tags => DepartamentoCacheKey.Tags;
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}, Search:{Keyword}, {OrderBy}, {SortDirection}";
    }
    public string CacheKey => DepartamentoCacheKey.GetExportCacheKey($"{this}");
}

public class ExportDepartamentosQueryHandler :
         IRequestHandler<ExportDepartamentosQuery, Result<byte[]>>
{
    private readonly IMapper _mapper;
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IExcelService _excelService;
    private readonly IStringLocalizer<ExportDepartamentosQueryHandler> _localizer;
    private readonly DepartamentoDto _dto = new();
    public ExportDepartamentosQueryHandler(
        IMapper mapper,
        IApplicationDbContextFactory dbContextFactory,
        IExcelService excelService,
        IStringLocalizer<ExportDepartamentosQueryHandler> localizer
        )
    {
        _mapper = mapper;
        _dbContextFactory = dbContextFactory;
        _excelService = excelService;
        _localizer = localizer;
    }
#nullable disable warnings
    public async Task<Result<byte[]>> Handle(ExportDepartamentosQuery request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await db.Departamentos.ApplySpecification(request.Specification)
                   .OrderBy($"{request.OrderBy} {request.SortDirection}")
                   .ProjectTo<DepartamentoDto>(_mapper.ConfigurationProvider)
                   .AsNoTracking()
                   .ToListAsync(cancellationToken);
        var result = await _excelService.ExportAsync(data,
            new Dictionary<string, Func<DepartamentoDto, object?>>()
            {
                {_localizer[_dto.GetMemberDescription(x=>x.Nombre)],item => item.Nombre},
                {_localizer[_dto.GetMemberDescription(x=>x.Descripcion)],item => item.Descripcion},
                {"Encargado", item => item.Encargado?.DisplayName ?? item.Encargado?.UserName ?? "N/A"},
                {_localizer[_dto.GetMemberDescription(x=>x.EncargadoId)],item => item.EncargadoId},
                {"Empresa", item => item.Tenant?.Name ?? "N/A"},
                {_localizer[_dto.GetMemberDescription(x=>x.TenantId)],item => item.TenantId},
            }
            , _localizer[_dto.GetClassDescription()]);
        return await Result<byte[]>.SuccessAsync(result);
    }
}
