//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-09
// Command for adding/editing a departamento entity with validation, mapping,
// domain events, and cache invalidation.
// Documentation: https://docs.cleanarchitectureblazor.com/features/departamento
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings


using CleanArchitecture.Blazor.Application.Features.Departamentos.Caching;
using CleanArchitecture.Blazor.Application.Features.Departamentos.Commands.Update;
using CleanArchitecture.Blazor.Application.Features.Departamentos.DTOs;
using CleanArchitecture.Blazor.Application.Features.Identity.DTOs;
using CleanArchitecture.Blazor.Application.Features.Tenants.DTOs;
namespace CleanArchitecture.Blazor.Application.Features.Departamentos.Commands.AddEdit;

public class AddEditDepartamentoCommand : ICacheInvalidatorRequest<Result<int>>
{
    [Description("Id")]
    public int Id { get; set; }
    [Description("Nombre")]
    public string? Nombre { get; set; }
    [Description("Descripcion")]
    public string? Descripcion { get; set; }
    [Description("Encargado id")]
    public string? EncargadoId { get; set; }
    public ApplicationUserDto? Encargado { get; set; }
    [Description("Tenant id")]
    public string? TenantId { get; set; }
    [Description("Tenant")]
    public TenantDto? Tenant { get; set; }


    public string CacheKey => DepartamentoCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => DepartamentoCacheKey.Tags;
    private class Mapping : Profile
    {
        public Mapping()
        {
            
            CreateMap<DepartamentoDto, AddEditDepartamentoCommand>(MemberList.None);
            CreateMap<AddEditDepartamentoCommand, Departamento>(MemberList.None)
                .ForMember(d => d.TenantId, opt => opt.MapFrom(s => s.Tenant != null ? s.Tenant.Id : s.TenantId))
                .ForMember(d => d.EncargadoId, opt => opt.MapFrom(s => s.Encargado != null ? s.Encargado.Id : s.EncargadoId))
                .ForMember(d => d.Tenant, opt => opt.Ignore())
                .ForMember(d => d.Encargado, opt => opt.Ignore());
        }
    }
}

public class AddEditDepartamentoCommandHandler : IRequestHandler<AddEditDepartamentoCommand, Result<int>>
{
    private readonly IMapper _mapper;
    private readonly IApplicationDbContextFactory _dbContextFactory;
    public AddEditDepartamentoCommandHandler(
        IMapper mapper,
        IApplicationDbContextFactory dbContextFactory)
    {
        _mapper = mapper;
        _dbContextFactory = dbContextFactory;
    }
    public async Task<Result<int>> Handle(AddEditDepartamentoCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        if (request.Id > 0)
        {
            var item = await db.Departamentos.FindAsync(request.Id, cancellationToken);
            if (item == null)
            {
                return await Result<int>.FailureAsync($"Departamento with id: [{request.Id}] not found.");
            }
            item = _mapper.Map(request, item);
            // raise a update domain event
            item.AddDomainEvent(new DepartamentoUpdatedEvent(item));
            await db.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }
        else
        {
            var item = _mapper.Map<Departamento>(request);
            // raise a create domain event
            item.AddDomainEvent(new DepartamentoCreatedEvent(item));
            db.Departamentos.Add(item);
            await db.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(item.Id);
        }

    }
}

