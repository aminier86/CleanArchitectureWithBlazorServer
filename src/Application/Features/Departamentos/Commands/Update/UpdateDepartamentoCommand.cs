//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-09
// UpdateDepartamentoCommand & handler: updates an existing Departamento with cache invalidation and raises DepartamentoUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/departamento
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Departamentos.Caching;
using CleanArchitecture.Blazor.Application.Features.Departamentos.Commands.AddEdit;
using CleanArchitecture.Blazor.Application.Features.Departamentos.DTOs;
using CleanArchitecture.Blazor.Application.Features.Identity.DTOs;
using CleanArchitecture.Blazor.Application.Features.Tenants.DTOs;

namespace CleanArchitecture.Blazor.Application.Features.Departamentos.Commands.Update;

public class UpdateDepartamentoCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Nombre")]
    public string? Nombre {get;set;} 
    [Description("Descripcion")]
    public string? Descripcion {get;set;} 
    [Description("Encargado id")]
    public string? EncargadoId {get;set;} 
    public ApplicationUserDto? Encargado {get;set; }
    [Description("Tenant id")]
    public string? TenantId {get;set;} 
    [Description("Tenant")]
    public TenantDto? Tenant {get;set;} 

      public string CacheKey => DepartamentoCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => DepartamentoCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            // CORRECTO: Mapeo de DepartamentoDto a UpdateDepartamentoCommand
            CreateMap<DepartamentoDto, UpdateDepartamentoCommand>(MemberList.None);

            // CORRECTO: Mapeo de UpdateDepartamentoCommand a Departamento
            CreateMap<UpdateDepartamentoCommand, Departamento>(MemberList.None)
                .ForMember(d => d.TenantId, opt => opt.MapFrom(s => s.Tenant != null ? s.Tenant.Id : s.TenantId))
                .ForMember(d => d.EncargadoId, opt => opt.MapFrom(s => s.Encargado != null ? s.Encargado.Id : s.EncargadoId))
                .ForMember(d => d.Tenant, opt => opt.Ignore())
                .ForMember(d => d.Encargado, opt => opt.Ignore());
        }
    }

}

public class UpdateDepartamentoCommandHandler : IRequestHandler<UpdateDepartamentoCommand, Result<int>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    public UpdateDepartamentoCommandHandler(
        IMapper mapper,
        IApplicationDbContextFactory dbContextFactory)
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }
    public async Task<Result<int>> Handle(UpdateDepartamentoCommand request, CancellationToken cancellationToken)
    {
       await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
       var item = await db.Departamentos.FindAsync(request.Id, cancellationToken);
       if (item == null)
       {
           return await Result<int>.FailureAsync($"Departamento with id: [{request.Id}] not found.");
       }
       item = _mapper.Map(request, item);
	    // raise a update domain event
	   item.AddDomainEvent(new DepartamentoUpdatedEvent(item));
       await db.SaveChangesAsync(cancellationToken);
       return await Result<int>.SuccessAsync(item.Id);
    }
}

