//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-09
// Command and handler for deleting Departamento entities.
// Implements cache invalidation and triggers domain events.
// Docs: https://docs.cleanarchitectureblazor.com/features/departamento
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Departamentos.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Departamentos.Commands.Delete;

public class DeleteDepartamentoCommand:  ICacheInvalidatorRequest<Result>
{
  public int[] Id {  get; }
  public string CacheKey => DepartamentoCacheKey.GetAllCacheKey;
  public IEnumerable<string>? Tags => DepartamentoCacheKey.Tags;
  public DeleteDepartamentoCommand(int[] id)
  {
    Id = id;
  }
}

public class DeleteDepartamentoCommandHandler : 
             IRequestHandler<DeleteDepartamentoCommand, Result>

{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    public DeleteDepartamentoCommandHandler(
        IApplicationDbContextFactory dbContextFactory)
    {
        _dbContextFactory = dbContextFactory;
    }
    public async Task<Result> Handle(DeleteDepartamentoCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var items = await db.Departamentos.Where(x=>request.Id.Contains(x.Id)).ToListAsync(cancellationToken);
        foreach (var item in items)
        {
		    // raise a delete domain event
			item.AddDomainEvent(new DepartamentoDeletedEvent(item));
            db.Departamentos.Remove(item);
        }
        await db.SaveChangesAsync(cancellationToken);
        return await Result.SuccessAsync();
    }

}

