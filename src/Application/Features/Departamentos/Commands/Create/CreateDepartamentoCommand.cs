//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-09-09
// Command and handler for creating a new Departamento.
// Uses caching invalidation and domain events for data consistency.
// Docs: https://docs.cleanarchitectureblazor.com/features/departamento
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Departamentos.Caching;
using CleanArchitecture.Blazor.Application.Features.Identity.DTOs;
using CleanArchitecture.Blazor.Application.Features.Tenants.DTOs;

namespace CleanArchitecture.Blazor.Application.Features.Departamentos.Commands.Create;

public class CreateDepartamentoCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Nombre")]
    public string? Nombre {get;set;} 
    [Description("Descripcion")]
    public string? Descripcion {get;set;} 
    [Description("Encargado id")]
    public string? EncargadoId {get;set;} 
    public ApplicationUserDto? Encargado {get;set; }
    [Description("Tenant id")]
    public string? TenantId {get;set;} 
    [Description("Tenant")]
    public TenantDto? Tenant {get;set;} 

      public string CacheKey => DepartamentoCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => DepartamentoCacheKey.Tags;
      private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateDepartamentoCommand, Departamento>(MemberList.None);
        }
    }
}
    
    public class CreateDepartamentoCommandHandler : IRequestHandler<CreateDepartamentoCommand, Result<int>>
    {
        private readonly IMapper _mapper;
        private readonly IApplicationDbContextFactory _dbContextFactory;
        public CreateDepartamentoCommandHandler(
            IMapper mapper,
            IApplicationDbContextFactory dbContextFactory)
        {
            _mapper = mapper;
            _dbContextFactory = dbContextFactory;
        }
        public async Task<Result<int>> Handle(CreateDepartamentoCommand request, CancellationToken cancellationToken)
        {
           await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
           var item = _mapper.Map<Departamento>(request);
           // raise a create domain event
	       item.AddDomainEvent(new DepartamentoCreatedEvent(item));
           db.Departamentos.Add(item);
           await db.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

