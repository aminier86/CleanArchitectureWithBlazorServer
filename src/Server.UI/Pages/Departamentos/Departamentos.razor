@page "/pages/departamentos"

@using CleanArchitecture.Blazor.Application.Features.Departamentos.Caching
@using CleanArchitecture.Blazor.Application.Features.Departamentos.DTOs
@using CleanArchitecture.Blazor.Application.Features.Departamentos.Specifications
@using CleanArchitecture.Blazor.Application.Features.Departamentos.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.Departamentos.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.Departamentos.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.Departamentos.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.Departamentos.Commands.AddEdit
@using CleanArchitecture.Blazor.Server.UI.Pages.Departamentos.Components

@inject IStringLocalizer<Departamentos> L
@inject BlazorDownloadFileService BlazorDownloadFileService

@attribute [Authorize(Policy = Permissions.Departamentos.View)]
<PageTitle>@Title</PageTitle>

<MudDataGrid ServerData="@(ServerReload)"
             FixedHeader="true"
             FixedFooter="false"
             Virtualize="false"
             @bind-RowsPerPage="_defaultPageSize"
             Loading="@_loading"
             MultiSelection="true"
             T="DepartamentoDto"
             SelectOnRowClick="false"
             RowClick="@(s=>OnDataGridRowClick(s.Item))"
             @bind-SelectedItems="_selectedDepartamentos"
             Hover="true" @ref="_departamentosGrid">
    <ToolBarContent>
        <MudStack Row Spacing="0" Class="flex-grow-1" Justify="Justify.SpaceBetween">
            <MudStack Row AlignItems="AlignItems.Start">
                <MudIcon Icon="@Icons.Material.Filled.Window" Size="Size.Large" />
                <MudStack Spacing="0">
                    <MudText Typo="Typo.subtitle2" Class="mb-2">@Title</MudText>
                    <MudEnumSelect Style="min-width:120px" TEnum="DepartamentoListView" ValueChanged="OnListViewChanged" Value="_departamentosQuery.ListView" Dense="true" Label="@L["List View"]">
                    </MudEnumSelect>
                </MudStack>
            </MudStack>
            <MudStack Spacing="0" AlignItems="AlignItems.End">
                <MudToolBar Dense WrapContent="true" Class="py-1 px-0">
                    <MudButton Disabled="@_loading"
                               OnClick="@(() => OnRefresh())"
                               StartIcon="@Icons.Material.Outlined.Refresh">
                        @ConstantString.Refresh
                    </MudButton>
                    @if (_accessRights.Create)
                    {
                        <MudButton StartIcon="@Icons.Material.Outlined.Add"
                                   OnClick="OnCreate">
                            @ConstantString.New
                        </MudButton>
                    }
                    <MudMenu TransformOrigin="Origin.BottomRight" AnchorOrigin="Origin.BottomRight" EndIcon="@Icons.Material.Filled.MoreVert" Label="@ConstantString.More">
                        @if (_accessRights.Create)
                        {
                            <MudMenuItem Disabled="@(_selectedDepartamentos.Count != 1)" OnClick="OnCloneDepartamento">@ConstantString.Clone</MudMenuItem>
                        }
                        @if (_accessRights.Delete)
                        {
                            <MudMenuItem Disabled="@(!(_selectedDepartamentos.Count > 0))"
                                         OnClick="OnDeleteSelectedDepartamentos">
                                @ConstantString.Delete
                            </MudMenuItem>
                        }
                        @if (_accessRights.Export)
                        {
                            <MudMenuItem Disabled="@_exporting"
                                         OnClick="OnExport">
                                @ConstantString.Export
                            </MudMenuItem>
                        }
                        @if (_accessRights.Import)
                        {
                            <MudMenuItem>
                                <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx">
                                    <ActivatorContent>
                                        <MudButton Class="pa-0 ma-0" Style="font-weight:400;text-transform:none;"
                                                   Variant="Variant.Text"
                                                   Disabled="@_uploading">
                                            @ConstantString.Import
                                        </MudButton>
                                    </ActivatorContent>
                                </MudFileUpload>
                            </MudMenuItem>
                        }
                    </MudMenu>
                </MudToolBar>
                <MudStack Row Spacing="1">
                    @if (_accessRights.Search)
                    {
                        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Value="@_departamentosQuery.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                        </MudTextField>
                    }
                </MudStack>
            </MudStack>
        </MudStack>
    </ToolBarContent>
    <Columns>
        <SelectColumn ShowInFooter="false"></SelectColumn>
        <TemplateColumn HeaderStyle="width:60px" Title="@ConstantString.Actions" Sortable="false">
            <CellTemplate>
                @if (_accessRights.Edit || _accessRights.Delete)
                {
                    <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                        @if (_accessRights.Edit)
                        {
                            <MudMenuItem OnClick="@(() => OnEditDepartamento(context.Item))">@ConstantString.Edit</MudMenuItem>
                        }
                        @if (_accessRights.Delete)
                        {
                            <MudMenuItem OnClick="@(() => OnDeleteDepartamento(context.Item))">@ConstantString.Delete</MudMenuItem>
                        }
                    </MudMenu>
                }
                else
                {
                    <MudTooltip Text="@ConstantString.NoAllowed" Delay="300">
                        <MudIconButton Variant="Variant.Outlined"
                                       Disabled="true"
                                       Icon="@Icons.Material.Filled.DoNotTouch"
                                       Size="Size.Small"
                                       Color="Color.Surface">
                            @ConstantString.NoAllowed
                        </MudIconButton>
                    </MudTooltip>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Nombre" Title="@L[_departamentoDto.GetMemberDescription(x => x.Nombre)]" />
        <PropertyColumn Property="x => x.Descripcion" Title="@L[_departamentoDto.GetMemberDescription(x => x.Descripcion)]" />
        <PropertyColumn Property="x => x.Encargado.DisplayName" Title="@L[_departamentoDto.GetMemberDescription(x => x.EncargadoId)]" />
        <PropertyColumn Property="x => x.Tenant.Name" Title="@L[_departamentoDto.GetMemberDescription(x => x.TenantId)]" />

    </Columns>
    <NoRecordsContent>
        <MudText>@ConstantString.NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ConstantString.Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new int[] { 10, 15, 30, 50, 100, 500, 1000 })" />
    </PagerContent>
</MudDataGrid>



@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<DepartamentoDto> _selectedDepartamentos = new HashSet<DepartamentoDto>();
    private MudDataGrid<DepartamentoDto> _departamentosGrid = default!;
    private DepartamentoDto _departamentoDto = new();
    private bool _loading;
    private bool _uploading;
    private bool _exporting;
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    [CascadingParameter]
    private UserProfile? UserProfile { get; set; }


    private DepartamentosWithPaginationQuery _departamentosQuery { get; set; } = new();
    private DepartamentosAccessRights _accessRights = new();

    protected override async Task OnInitializedAsync()
    {
        Title = L[_departamentoDto.GetClassDescription()];
        _accessRights = await PermissionService.GetAccessRightsAsync<DepartamentosAccessRights>();
    }

    private async Task<GridData<DepartamentoDto>> ServerReload(GridState<DepartamentoDto> state)
    {
        try
        {
            _loading = true;
            _departamentosQuery.CurrentUser = UserProfile;
            var sortDefinition = state.SortDefinitions.FirstOrDefault();
            _departamentosQuery.OrderBy = sortDefinition?.SortBy ?? "Id";
            _departamentosQuery.SortDirection = (sortDefinition != null && sortDefinition.Descending)
                                      ? SortDirection.Descending.ToString()
                                      : SortDirection.Ascending.ToString();
            _departamentosQuery.PageNumber = state.Page + 1;
            _departamentosQuery.PageSize = state.PageSize;
            var result = await Mediator.Send(_departamentosQuery).ConfigureAwait(false);
            return new GridData<DepartamentoDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }
    private async Task OnSearch(string text)
    {
        _selectedDepartamentos.Clear();
        _departamentosQuery.Keyword = text;
        await _departamentosGrid.ReloadServerData();
    }
    private async Task OnListViewChanged(DepartamentoListView listview)
    {
        _departamentosQuery.ListView = listview;
        await _departamentosGrid.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        DepartamentoCacheKey.Refresh();
        _selectedDepartamentos.Clear();
        _departamentosQuery.Keyword = string.Empty;
        await _departamentosGrid.ReloadServerData();
    }
    private Task ShowEditFormDialog(string title, AddEditDepartamentoCommand command)
    {
        return DialogServiceHelper.ShowFormDialogAsync<DepartamentoFormDialog, AddEditDepartamentoCommand>(
            title,
            command,
            async () =>
            {
                await _departamentosGrid.ReloadServerData();
                _selectedDepartamentos.Clear();
            });
    }
    private void OnDataGridRowClick(DepartamentoDto dto)
    {
        Navigation.NavigateTo($"/pages/departamentos/view/{dto.Id}");
    }
    private Task OnCreate()
    {
        var command = new AddEditDepartamentoCommand();
        return ShowEditFormDialog(L["New Departamento"], command);
    }
    private Task OnCloneDepartamento()
    {
        var dto = _selectedDepartamentos.First();
        var command = new AddEditDepartamentoCommand()
        {
            Nombre = dto.Nombre,
            Descripcion = dto.Descripcion,
            EncargadoId = dto.EncargadoId,
            TenantId = dto.TenantId,

        };
        return ShowEditFormDialog(L["Clone Departamento"], command);
    }
    private Task OnEditDepartamento(DepartamentoDto dto)
    {
        //var command = Mapper.Map<AddEditDepartamentoCommand>(dto);
        //return ShowEditFormDialog(L["Edit Departamento"], command);
        Navigation.NavigateTo($"/pages/departamentos/edit/{dto.Id}");
        return Task.CompletedTask;
    }

    private Task OnDeleteDepartamento(DepartamentoDto dto)
    {
        var contentText = string.Format(ConstantString.DeleteConfirmation, dto.Nombre);
        var command = new DeleteDepartamentoCommand(new int[] { dto.Id });
        return DeleteDepartamentosInternal(command, contentText);
    }

    private Task OnDeleteSelectedDepartamentos()
    {
        var contentText = string.Format(ConstantString.DeleteConfirmWithSelected, _selectedDepartamentos.Count);
        var command = new DeleteDepartamentoCommand(_selectedDepartamentos.Select(x => x.Id).ToArray());
        return DeleteDepartamentosInternal(command, contentText);
    }

    private Task DeleteDepartamentosInternal(DeleteDepartamentoCommand command, string contentText)
    {
        return DialogServiceHelper.ShowDeleteConfirmationDialogAsync(
            command,
            ConstantString.DeleteConfirmationTitle,
            contentText,
            async () =>
            {
                await _departamentosGrid.ReloadServerData();
                _selectedDepartamentos.Clear();
            });
    }


    private async Task OnExport()
    {
        _exporting = true;
        var request = new ExportDepartamentosQuery()
        {
            Keyword = _departamentosQuery.Keyword,
            CurrentUser = UserProfile,
            ListView = _departamentosQuery.ListView,
            OrderBy = _departamentosGrid.SortDefinitions.Values.FirstOrDefault()?.SortBy ?? "Id",
            SortDirection = (_departamentosGrid.SortDefinitions.Values.FirstOrDefault()?.Descending ?? true) ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString()
        };
        var result = await Mediator.Send(request);
        await result.MatchAsync(
            async data =>
            {
                await BlazorDownloadFileService.DownloadFileAsync($"{L["Departamentos"]}.xlsx", result.Data, contentType: "application/octet-stream");
                Snackbar.Add($"{ConstantString.ExportSuccess}", MudBlazor.Severity.Info);
            },
            errors =>
            {
                Snackbar.Add($"{errors}", MudBlazor.Severity.Error);
                return Task.CompletedTask;
            });
        _exporting = false;
    }
    private async Task OnImportData(IBrowserFile file)
    {
        _uploading = true;
        var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        var command = new ImportDepartamentosCommand(file.Name, stream.ToArray());
        var result = await Mediator.Send(command);
        await result.MatchAsync(
            async data =>
            {
                await _departamentosGrid.ReloadServerData();
                Snackbar.Add($"{ConstantString.ImportSuccess}", MudBlazor.Severity.Info);
            }, errors =>
            {
                Snackbar.Add($"{errors}", MudBlazor.Severity.Error);
                return Task.CompletedTask;
            });
        _uploading = false;
    }

}
