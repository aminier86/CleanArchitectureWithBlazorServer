@page "/pages/ejemplos/edit/{id:int}"
@using CleanArchitecture.Blazor.Application.Features.Ejemplos.Commands.Update
@using CleanArchitecture.Blazor.Application.Features.Ejemplos.Queries.GetById
@using CleanArchitecture.Blazor.Server.UI.Components.Sessions

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<Ejemplos> L
@attribute [Authorize(Policy = Permissions.Ejemplos.Edit)]

<PageTitle>@Title</PageTitle>
<Breadcrumbs OnSaveButtonClick="OnSubmit" Saving="_saving" BreadcrumbItems="_breadcrumbItems"></Breadcrumbs>
<MudContainer Class="mt-3" MaxWidth="MaxWidth.Large">
@if (_model != null)
{
    <MudCard Class="pa-2">
        <MudCardHeader>
            <CardHeaderContent>
                 <MudText Typo="Typo.h6">@Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
        <ActiveUserSession PageComponent="@($"{nameof(EditEjemplo)}/{ _model.Id }")" />
        <MudForm Model="@_model" @ref="@_ejemploForm" Validation="@(Validator.ValidateValue(_model))">
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[_model.GetMemberDescription(x=>x.Name)]" @bind-Value="_model.Name" For="@(() => _model.Name)" Required="true" RequiredError="@L["name is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[_model.GetMemberDescription(x=>x.Description)]"  For="@(() => _model.Description)" @bind-Value="_model.Description"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[_model.GetMemberDescription(x=>x.Email)]" @bind-Value="_model.Email" For="@(() => _model.Email)" Required="false" RequiredError="@L["email is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[_model.GetMemberDescription(x=>x.PhoneNumber)]" @bind-Value="_model.PhoneNumber" For="@(() => _model.PhoneNumber)" Required="false" RequiredError="@L["phone number is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[_model.GetMemberDescription(x=>x.Country)]" @bind-Value="_model.Country" For="@(() => _model.Country)" Required="false" RequiredError="@L["country is required!"]"></MudTextField>
                </MudItem> 

            </MudGrid>
        </MudForm>
        </MudCardContent>
        <MudCardActions Class="d-flex justify-end gap-2">
                    <MudLoadingButton Color="Color.Primary" DropShadow="false" Loading="@_saving" OnClick="OnSubmit">@ConstantString.Save</MudLoadingButton>
        </MudCardActions>
        </MudCard>
    }
</MudContainer>
 

@code {
    public string? Title { get; private set; }
    [Parameter]
    public int Id { get; set; }
    MudForm _ejemploForm = new();
    private bool _saving = false;
    private List<BreadcrumbItem>? _breadcrumbItems;
    private UpdateEjemploCommand? _model;
    protected override async Task OnInitializedAsync()
    {
        Title = L["Edit Ejemplo"];
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem(L["Home"], href: "/"),
            new BreadcrumbItem(L["Ejemplos"], href: "/pages/ejemplos")
        };
        var result = await Mediator.Send(new GetEjemploByIdQuery() { Id = Id });
        result.Map(data =>
        {
            _model = Mapper.Map<UpdateEjemploCommand>(data);
            return data;
        }).Match(data =>
        {
            _breadcrumbItems.Add(new BreadcrumbItem(data.Name, href: $"/pages/ejemplos/edit/{Id}"));
        }, errors =>
        {
            Snackbar.Add($"{errors}", Severity.Error);
        });

    }
    async Task OnSubmit()
    {
        try
        {
            _saving = true;
            await _ejemploForm.Validate().ConfigureAwait(false);
            if (!_ejemploForm.IsValid)
                return;
            var result = await Mediator.Send(_model);
            result.Match(
                data=>
                {
                    Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                },
                errors=>
                {
                    Snackbar.Add(errors, MudBlazor.Severity.Error);
                });
        }
        finally
        {
            _saving = false;
        }
    }
}
